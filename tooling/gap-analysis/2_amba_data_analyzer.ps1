#Requires -Version 7

<#
.SYNOPSIS
Azure Monitor Baseline Alerts (AMBA) Gap Analysis v0.1 data analyzer script

.DESCRIPTION
This script does...

.PARAMETER Debugging
Switch to enable debugging mode.

.PARAMETER Help
Switch to display help information.

.PARAMETER JSONFile
Path to the JSON file created by the "1_amba_collector" script.

.EXAMPLE
.\2_amba_data_analyzer.ps1 -JSONFile 'C:\Temp\AMBA_File_2024-09-20_09_50.json' -Debugging

.LINK
https://azure.github.io/azure-monitor-baseline-alerts/welcome/
#>

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '', Justification = 'False positive as Write-Host does not represent a security risk and this script will always run on host consoles')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSReviewUnusedParameter', '', Justification = 'False positive as parameters are not always required')]

Param(
  [switch]$Debugging,
  [switch]$Help,

  [Parameter(mandatory = $true)]
  [string] $JSONFile)

# Checking the operating system running this script.
if (-not $IsWindows) {
  Write-Host 'This script only supports Windows operating systems currently. Please try to run with Windows operating systems.'
  Exit
}

if ($Debugging.IsPresent) { $DebugPreference = 'Continue' } else { $DebugPreference = 'silentlycontinue' }

$Script:FilterRecommendations = $true

$Script:Runtime = Measure-Command -Expression {

  function Get-HelpMessage {
    Write-Host ''
    Write-Host 'Parameters'
    Write-Host ''
    Write-Host " -JSONFile                      :  Mandatory; AMBA JSON file generated by '1_amba_collector.ps1' script. "
    Write-Host ' -Debugging                     :  Switch; Writes Debugging information of the script during the execution. '
    Write-Host ''
    Write-Host 'Examples: '
    Write-Host '  Run using JSON file'
    Write-Host "  .\2_amba_analyzer.ps1 -JSONFile 'C:\Temp\AMBA_File_2024-09-20_09_50.json'"
    Write-Host ''
    Write-Host '  Run using JSON file with Debugging details'
    Write-Host "  .\2_amba_analyzer.ps1 -JSONFile 'C:\Temp\AMBA_File_2024-09-20_09_50.json' -Debugging"
    Write-Host ''
    Write-Host ''
  }

  function Test-Requirement {
    # Install required modules
    Write-Host 'Validating ' -NoNewline
    Write-Host 'ImportExcel' -ForegroundColor Cyan -NoNewline
    Write-Host ' Module..'
    $ImportExcel = Get-Module -Name ImportExcel -ListAvailable -ErrorAction silentlycontinue
    if ($null -eq $ImportExcel) {
      Write-Host 'Installing ImportExcel Module' -ForegroundColor Yellow
      Install-Module -Name ImportExcel -Force -SkipPublisherCheck
    }
    Write-Host 'Validating ' -NoNewline
    Write-Host 'Powershell-YAML' -ForegroundColor Cyan -NoNewline
    Write-Host ' Module..'
    $AzModules = Get-Module -Name powershell-yaml -ListAvailable -ErrorAction silentlycontinue
    if ($null -eq $AzModules) {
      Write-Host 'Installing Az Modules' -ForegroundColor Yellow
      Install-Module -Name powershell-yaml -SkipPublisherCheck -InformationAction SilentlyContinue
    }
  }

  function Set-LocalFile {
    [CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'Low')]
    param()

    if ($PSCmdlet.ShouldProcess('')) {

      # Define script path as the default path to save files
      $workingFolderPath = $PSScriptRoot
      Set-Location -Path $workingFolderPath;
    }
  }

  function Convert-JSON {
    Write-Host 'Processing JSON File'

    # Load the JSON file from the collector script...
    $JSONFile = Get-Item -Path $JSONFile
    $JSONFile = $JSONFile.FullName
    $results = Get-Content -Path $JSONFile | ConvertFrom-Json

    $Script:AllResourceTypesOrdered = $results.ResourceType

    $Script:CollectorDetails = $results.ScriptDetails
    $Script:OutOfScope = $results.OutOfScope

    $CoreResources = $results.ImpactedResources

    $alerts = Get-Content -Path 'amba-metric-alerts.csv' | ConvertFrom-Csv
    $Script:AMBAALERTContent = $alerts | Where-Object { $_.visible -eq 'TRUE' }

    $Script:AlertARMTemplates = Get-Content -Path 'ArmTemplateList.txt'

    $Script:MergedRecommendation = @()

    foreach ($Recom in $CoreResources | Where-Object { $_ -ne $null }) {
      if ($($Recom.alertToCheck) -and $($Recom.implemented -eq "No")) {

        $alertFileName = $Recom.alertToCheck.Replace(" ", "")
        $alertFileName = $alertFileName.Replace("/", "")
        $alertFileName = $alertFileName.Replace("_", "")
        $alertFileName = $alertFileName.Replace("%", "")
        $alertFileName = $alertFileName.Replace(".", "")

        $templateFile = ($Script:AlertARMTemplates | Where-Object { $_ -match '(?<=/'+ $Recom.type.Split('.')[1] + '/(.*)' + $alertFileName + '_)(.*)(?=.json)' })

        $deployToAzure = ('az deployment group create --name "AMBA-' + [guid]::NewGuid() +
        '" --resource-group "AMBA-Generated-Alerts-RG" --template-uri "https://raw.githubusercontent.com/Azure/azure-monitor-baseline-alerts/refs/heads/main/services/' + 
        $templateFile.Split('/')[1] + '/' + $templateFile.Split('/')[2] + '/templates/arm/' + $templateFile.Split('/')[3] + 
        '" --parameters alertName="AMBA-' + $Recom.alertToCheck + '-' + $Recom.resourceGroup + '-' + $Recom.name + '" targetResourceId="' + $Recom.id + 
        '" targetResourceRegion="' + $Recom.location + 
        '" targetResourceType="' + $Recom.type + '"');

        $tmp = @{
          alertName                                                                         = $Recom.alertToCheck;
          metricNamespace                                                                   = $Recom.metricNamespace;
          resourceType                                                                      = $Recom.type;
          subscriptionId                                                                    = $Recom.subscriptionId;
          resourceGroup                                                                     = $Recom.resourceGroup;
          name                                                                              = $Recom.name;
          id                                                                                = $Recom.id;
          location                                                                          = $Recom.location;
          implemented                                                                       = $Recom.implemented;
          fullAlertName                                                                     = $Recom.metricNamespace + '/' + $Recom.alertToCheck;
          deployToAzure                                                                     = $deployToAzure;
        }

        $Script:MergedRecommendation += $tmp

      }
    }
    # Removes duplicate alerts.  However, this needs to be revisited for alerts such as "Transactions" for storage accounts 
    # which have same alert just differing operators and thresholds.
    $Script:MergedRecommendation = $Script:MergedRecommendation | Sort-Object -Property id, fullAlertName -Unique
  }

  function Build-ExcelFile {

    Write-Host 'Starting Excel file Processing. '

    $TableStyle = 'Light19'
    $Script:Recommendations = @()

    # Defines the Excel file to be created in the root folder
    $Script:ExcelFile = ($PSScriptRoot + '\AMBA Action Plan ' + (Get-Date -Format 'yyyy-MM-dd-HH-mm') + '.xlsx')

    function Add-ImpactedResource {
      ####################    Creates the first sheet (ImpactedResources)
      $Styles1 = @(
        New-ExcelStyle -HorizontalAlignment Center -FontName 'Calibri' -FontSize 11 -FontColor 'White' -Bold -BackgroundColor 'DarkSlateGray' -AutoSize -Range 'A1:K1'
        New-ExcelStyle -HorizontalAlignment Center -FontName 'Calibri' -FontSize 11 -AutoSize -NumberFormat '0' -Range 'A:J'
        New-ExcelStyle -HorizontalAlignment Left -FontName 'Calibri' -FontSize 11 -AutoSize -NumberFormat '0' -Range 'K:K'
      )

      $Styles2 = @(
        New-ExcelStyle -HorizontalAlignment Center -FontName 'Calibri' -FontSize 11 -FontColor 'White' -Bold -BackgroundColor 'DarkSlateGray' -AutoSize -Range 'A1:G1'
        New-ExcelStyle -HorizontalAlignment Center -FontName 'Calibri' -FontSize 11 -AutoSize -NumberFormat '0' -Range 'A:F'
        New-ExcelStyle -HorizontalAlignment Left -FontName 'Calibri' -FontSize 11 -Width 80 -Range 'G:G'
      )

      $ImpactedResourcesSheet = New-Object System.Collections.Generic.List[System.Object]
      $ImpactedResourcesSheet.Add('resourceType')
      $ImpactedResourcesSheet.Add('alertName')
      $ImpactedResourcesSheet.Add('metricNamespace')
      $ImpactedResourcesSheet.Add('subscriptionId')
      $ImpactedResourcesSheet.Add('resourceGroup')
      $ImpactedResourcesSheet.Add('location')
      $ImpactedResourcesSheet.Add('name')
      $ImpactedResourcesSheet.Add('id')
      $ImpactedResourcesSheet.Add('implemented')
      $ImpactedResourcesSheet.Add('fullAlertName')
      $ImpactedResourcesSheet.Add('deployToAzure')

      $OutOfScopeSheet = New-Object System.Collections.Generic.List[System.Object]
      $OutOfScopeSheet.Add('description')
      $OutOfScopeSheet.Add('type')
      $OutOfScopeSheet.Add('subscriptionId')
      $OutOfScopeSheet.Add('resourceGroup')
      $OutOfScopeSheet.Add('name')
      $OutOfScopeSheet.Add('location')
      $OutOfScopeSheet.Add('id')


      $Script:MergedRecommendation | ForEach-Object { [PSCustomObject]$_ } | Select-Object $ImpactedResourcesSheet |
        Export-Excel -Path $ExcelFile -WorksheetName 'ImpactedResources' -TableName 'Table2' -AutoSize -TableStyle $TableStyle -Style $Styles1

      $Script:OutOfScope | ForEach-Object { [PSCustomObject]$_ } | Select-Object $OutOfScopeSheet |
        Export-Excel -Path $ExcelFile -WorksheetName 'Other-OutOfScope' -TableName 'UnTagTable' -AutoSize -TableStyle $TableStyle -Style $Styles2
    }

    function Add-ResourceType {
      ####################    Creates the second sheet (ResourceTypes)
      $ResourceTypeSheet = New-Object System.Collections.Generic.List[System.Object]
      $ResourceTypeSheet.Add('Resource Type')
      $ResourceTypeSheet.Add('Number of Resources')
      $ResourceTypeSheet.Add('Available in AMBA')
      $ResourceTypeSheet.Add('Assessment Owner')
      $ResourceTypeSheet.Add('Status')
      $ResourceTypeSheet.Add('Notes')

      $TypeStyle = @(
        New-ExcelStyle -HorizontalAlignment Center -FontName 'Calibri' -FontSize 11 -FontColor 'White' -Bold -BackgroundColor 'DarkSlateGray' -AutoSize -Range 'A1:F1'
        New-ExcelStyle -HorizontalAlignment Center -FontName 'Calibri' -FontSize 11 -AutoSize -NumberFormat '0' -Range 'A:F'
      )

      $Script:AllResourceTypesOrdered | ForEach-Object { [PSCustomObject]$_ } | Select-Object $ResourceTypeSheet |
        Export-Excel -Path $ExcelFile -WorksheetName 'ResourceTypes' -TableName 'TableTypes' -AutoSize -TableStyle $TableStyle -Style $TypeStyle

    }

    function Add-Recommendation {
      ####################    Starts to process the main sheet

      $rowNumber = 2
      # Builds the ALERT recommendations
      foreach ($ALERT in $Script:AMBAALERTContent) {
        $alertResourceCategory = $ALERT.ResourceCategory.ToLower()
        $alertResourceType = $ALERT.ResourceType.ToLower()
        $resourceType = "microsoft.$alertResourceCategory/$alertResourceType"

        if ($Script:AllResourceTypesOrdered | Where-Object { $_.'Resource Type' -eq $resourceType }) {
          $tmp = @{
            'Alert Implemented?'                                      = ('=IF((COUNTIF(ImpactedResources!J:J,"' + $ALERT.metricNamespace + '/' + $ALERT.metricName + '")=0),"Yes","No")');
            'Missing Alerts'                                          = ('=COUNTIF(ImpactedResources!J:J,"' + $ALERT.metricNamespace + '/' + $ALERT.metricName + '")');
            'Recommendation Source'                                   = 'AMBA';
            'Azure Service Category'                                  = ($resourceType.split('/')[0]);
            'Azure Service'                                           = ($resourceType.split('/')[1]);
            'Metric Namespace'                                        = $ALERT.metricNamespace;
            'Alert Name'                                              = $ALERT.Name;
            'Metric Name'                                             = $ALERT.metricName;
            'Description'                                             = $ALERT.Description;
            'Reference'                                               = [string]($ALERT.references -join "`n");
            'Num Resources of Same Type'                              = ('=VLOOKUP("' + $resourceType + '", ResourceTypes!A:B, 2, FALSE)');
            'Alerts Implemented'                                      = ('=ABS(ROUND(B' + $rowNumber + ' / K' + $rowNumber + ', 2) - 1)');
            'Impact'                                                  = ('=IF(L' + $rowNumber + '>=1,"INFO",IF(L' + $rowNumber + '>0.5,"LOW",IF(L' + $rowNumber + '>0,"MEDIUM","HIGH")))');
          }
          $Script:Recommendations += $tmp
          $rowNumber++
        }
      }

      $columnCommonStyle = @{
        FontName = 'Calibri'
        FontSize = 11
        WrapText = $true
      }

      $headerCommonStyle = @{
        FontName            = 'Calibri'
        FontSize            = 11
        FontColor           = 'White'
        Bold                = $true
        BackgroundColor     = 'DarkSlateGray'
        HorizontalAlignment = 'Center'
        VerticalAlignment   = 'Center'
        WrapText            = $true
      }

      $Styles2 = @(
        # Apply the style to the columns.
        New-ExcelStyle @columnCommonStyle -Range 'A:H' -HorizontalAlignment Center -VerticalAlignment Center
        New-ExcelStyle @columnCommonStyle -Range 'I:I' -HorizontalAlignment Left -VerticalAlignment Center
        New-ExcelStyle @columnCommonStyle -Range 'J:M' -HorizontalAlignment Center -VerticalAlignment Center

        # Apply the style to the header row.
        New-ExcelStyle @headerCommonStyle -Range 'A1:B1' -Width 20
        New-ExcelStyle @headerCommonStyle -Range 'C1' -Width 18
        New-ExcelStyle @headerCommonStyle -Range 'D1' -Width 20
        New-ExcelStyle @headerCommonStyle -Range 'E1:F1' -Width 35
        New-ExcelStyle @headerCommonStyle -Range 'G1' -Width 40
        New-ExcelStyle @headerCommonStyle -Range 'H1' -Width 40
        New-ExcelStyle @headerCommonStyle -Range 'I1' -Width 60
        New-ExcelStyle @headerCommonStyle -Range 'J1' -Width 60
        New-ExcelStyle @headerCommonStyle -Range 'K1:M1' -Width 30
      )

      # Configure the array of fields to be used in the Recommendations sheet
      $FinalWorksheet = New-Object System.Collections.Generic.List[System.Object]
      $FinalWorksheet.Add('Alert Implemented?')
      $FinalWorksheet.Add('Missing Alerts')
      $FinalWorksheet.Add('Recommendation Source')
      $FinalWorksheet.Add('Azure Service Category')
      $FinalWorksheet.Add('Azure Service')
      $FinalWorksheet.Add('Metric Namespace')
      $FinalWorksheet.Add('Alert Name')
      $FinalWorksheet.Add('Metric Name')
      $FinalWorksheet.Add('Description')
      $FinalWorksheet.Add('Reference')
      $FinalWorksheet.Add('Num Resources of Same Type')
      $FinalWorksheet.Add('Alerts Implemented')
      $FinalWorksheet.Add('Impact')

      ####################    Creates the recommendations sheet in Excel
      $Script:Recommendations | ForEach-Object { [PSCustomObject]$_ } | Select-Object $FinalWorksheet |
        Export-Excel -Path $ExcelFile -WorksheetName 'Recommendations' -TableName 'Table1' -AutoSize -TableStyle $tableStyle -Style $Styles2 -MoveToStart

    }

    function Build-PivotTable {
      ####################    Creates the empty PivotTable sheet to be used later
      '' | Export-Excel -Path $ExcelFile -WorksheetName 'PivotTable'

      ####################    Creates the Charts sheet and already add the first line with the yellow background
      $StyleOver = New-ExcelStyle -Range A1:G1 -Bold -FontSize 11 -BackgroundColor ([System.Drawing.Color]::Yellow) -Merge -HorizontalAlignment Left
      'Copy the Charts below to your Word and Powerpoint Documents' | Export-Excel -Path $ExcelFile -WorksheetName 'Charts' -Style $StyleOver

      # Open the Excel file to add the Pivot Tables and Charts
      $Excel = Open-ExcelPackage -Path $ExcelFile

      $PTParams = @{
        PivotTableName    = 'P0'
        Address           = $Excel.PivotTable.cells['H3']
        SourceWorkSheet   = $Excel.Recommendations
        PivotRows         = @('Azure Service')
        PivotData         = @{'Missing Alerts' = 'Sum';} 
        PivotTableStyle   = 'Medium8'
        Activate          = $true
        PivotFilter       = 'Azure Service Category'
        ShowPercent       = $true
        IncludePivotChart = $true
        ChartType         = 'BarStacked'
        ChartRow          = 80
        ChartColumn       = 3
        NoLegend          = $false
        ChartTitle        = 'Recommended Alerts Missing per Service'
        ChartHeight       = 700
        ChartWidth        = 500
      }
      Add-PivotTable @PTParams
      $Excel.Workbook.Worksheets["PivotTable"].PivotTables["P0"].DataFields[0].Name="Missing Alerts"

      $PTParams = @{
        PivotTableName    = 'P1'
        Address           = $Excel.PivotTable.cells['K3']
        SourceWorkSheet   = $Excel.Recommendations
        PivotRows         = @('Azure Service')
        PivotData         = @{'Alerts Implemented' = 'Average';} 
        PivotTableStyle   = 'Medium8'
        Activate          = $true
        PivotFilter       = 'Azure Service Category'
        ShowPercent       = $true
        IncludePivotChart = $true
        ChartType         = 'BarStacked'
        ChartRow          = 80
        ChartColumn       = 30
        NoLegend          = $false
        ChartTitle        = 'Percentage of Recommended Alerts Implemented per Service'
        ChartHeight       = 700
        ChartWidth        = 700
      }
      Add-PivotTable @PTParams
      $Excel.Workbook.Worksheets["PivotTable"].PivotTables["P1"].DataFields[0].Format="0%"
      $Excel.Workbook.Worksheets["PivotTable"].PivotTables["P1"].DataFields[0].Name="Alerts Implemented" 

      $PTParams = @{
        PivotTableName    = 'P2'
        Address           = $Excel.PivotTable.cells['A3']
        SourceWorkSheet   = $Excel.Recommendations
        PivotRows         = @('Azure Service')
        PivotColumns      = @('Impact') 
        PivotData         = @{'Impact' = 'Count';}
        PivotTableStyle   = 'Medium8'
        Activate          = $true
        PivotFilter       = 'Azure Service Category'
        ShowPercent       = $true
        IncludePivotChart = $true
        ChartType         = 'BarClustered'
        ChartRow          = 80
        ChartColumn       = 3
        NoLegend          = $false
        ChartTitle        = 'Recommended Alerts Impact per Service'
        ChartHeight       = 700
        ChartWidth        = 500
      }
      Add-PivotTable @PTParams
      $Excel.Workbook.Worksheets["PivotTable"].PivotTables["P2"].DataFields[0].Name="Impact"

      Close-ExcelPackage $Excel
    }

    function Invoke-ExcelAPI {
      Write-Host 'Opening Excel...'
      $Script:ExcelApplication = New-Object -ComObject Excel.Application
      Start-Sleep 2
      Write-Host 'Customizing Excel Charts. '
      # Open the Excel using the API to move the charts from the PivotTable sheet to the Charts sheet and change chart style, font, etc..
      if ($Script:ExcelApplication) {
        try {
          Write-Debug 'Opening Excel File'
          $Ex = $ExcelApplication.Workbooks.Open($ExcelFile)
          Start-Sleep -Seconds 2
          Write-Debug 'Opening Excel Sheets'
          $WS = $ex.Worksheets | Where-Object { $_.Name -eq 'PivotTable' }
          $WS2 = $ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }
          Write-Debug 'Moving Charts to Chart sheet'
          ($WS.Shapes | Where-Object { $_.name -eq 'ChartP0' }).DrawingObject.Cut()
          $WS2.Paste()

          ($WS.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Cut()
          $WS2.Paste()
          
          ($WS.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Cut()
          $WS2.Paste()

          Write-Debug 'Reloading Excel Chart Sheet'
          $WS2 = $ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

          Write-Debug 'Editing ChartP0'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP0' }).DrawingObject.Chart.ChartStyle = 222
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP0' }).DrawingObject.Chart.ChartArea.Font.Name = 'Segoe UI'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP0' }).DrawingObject.Chart.ChartArea.Font.Size = 9
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP0' }).DrawingObject.Chart.ChartArea.Left = 500
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP0' }).DrawingObject.Chart.ChartArea.Top = 40

          Write-Debug 'Editing ChartP1'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Chart.ChartStyle = 222
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Chart.ChartArea.Font.Name = 'Segoe UI'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Chart.ChartArea.Font.Size = 9
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Chart.ChartArea.Left = 1000
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Chart.ChartArea.Top = 40
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP1' }).DrawingObject.Chart.Axes(2).MaximumScale = 1

          Write-Debug 'Editing ChartP2'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.ChartStyle = 222
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.ChartArea.Font.Name = 'Segoe UI'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.ChartArea.Font.Size = 9
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.ChartArea.Left = 10
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.ChartArea.Top = 40
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.SeriesCollection('HIGH').Interior.Color = '#ED6924'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.SeriesCollection('MEDIUM').Interior.Color = '#106186'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.SeriesCollection('LOW').Interior.Color = '#029AD5'
          ($WS2.Shapes | Where-Object { $_.name -eq 'ChartP2' }).DrawingObject.Chart.SeriesCollection('INFO').Interior.Color = '#1D7128'


          Write-Debug 'Editing Pivot Filters'
          $WS.Range('B1').Formula = '(All)'
          $WS.Range('I1').Formula = '(All)'
          $WS.Range('L1').Formula = '(All)'

          Write-Debug 'Saving File'
          $Ex.Save()

          Write-Debug 'Closing Excel Application'
          $Ex.Close()
          $ExcelApplication.Quit()
          # Ensures the Excel process opened by the API is closed
          Write-Debug 'Ensuring Excel Process is Closed.'
          Get-Process -Name 'excel' -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process
        } catch {
          Write-Host 'Error during the PivotTable + Charts customization' -BackgroundColor DarkRed
        }
      }

    }

    Add-ImpactedResource
    Add-ResourceType
    Add-Recommendation
    Build-PivotTable
    Invoke-ExcelAPI

  }

  #Call the functions
  $Script:Version = '0.1'
  Write-Host 'Version: ' -NoNewline
  Write-Host $Script:Version -ForegroundColor DarkBlue

  if ($Help.IsPresent) {
    Get-HelpMessage
    Exit
  }

  Write-Debug 'Calling Function: Test-Requirement'
  Test-Requirement

  Write-Debug 'Calling Function: Set-LocalFile'
  Set-LocalFile

  Write-Debug 'Calling Function: Convert-JSON'
  Convert-JSON

  Write-Debug 'Calling Function: Build-ExcelFile'
  Build-ExcelFile
}

$TotalTime = $Script:Runtime.Totalminutes.ToString('#######.##')

Write-Host '---------------------------------------------------------------------'
Write-Host ('Execution Complete. Total Runtime was: ') -NoNewline
Write-Host $TotalTime -NoNewline -ForegroundColor Cyan
Write-Host (' Minutes')
Write-Host 'Excel File: ' -NoNewline
Write-Host $Script:ExcelFile -ForegroundColor Blue
Write-Host '---------------------------------------------------------------------'
