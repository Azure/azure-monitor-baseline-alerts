{
  "type": "Microsoft.Authorization/policyDefinitions",
  "apiVersion": "2021-06-01",
  "name": "Deploy_LAWorkspace_DailyCapLimitReached_Alert",
  "properties": {
    "policyType": "Custom",
    "mode": "All",
    "displayName": "Deploy LA Workspace Daily Cap Limit Reached Alert",
    "description": "Policy to audit/deploy LA Workspace Daily Cap Limit Reached Alert",
    "metadata": {
      "version": "1.1.0",
      "category": "Monitoring",
      "source": "https://github.com/Azure/azure-monitor-baseline-alerts/",
      "alzCloudEnvironments": [
        "AzureCloud"
      ],
      "_deployed_by_amba": "True"
    },
    "parameters": {
      "UAMIResourceId": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "The resource Id of the user assigned managed identity.",
          "displayName": "User Assigned managed Identity resource Id."
        }
      },
      "severity": {
        "type": "String",
        "metadata": {
          "displayName": "Severity",
          "description": "Severity of the Alert"
        },
        "allowedValues": [
          "0",
          "1",
          "2",
          "3",
          "4"
        ],
        "defaultValue": "2"
      },
      "operator": {
        "type": "String",
        "metadata": {
          "displayName": "Operator"
        },
        "allowedValues": [
          "GreaterThan",
          "GreaterThanOrEqual"
        ],
        "defaultValue": "GreaterThan"
      },
      "timeAggregation": {
        "type": "String",
        "metadata": {
          "displayName": "TimeAggregation"
        },
        "allowedValues": [
          "Count"
        ],
        "defaultValue": "Count"
      },
      "windowSize": {
        "type": "String",
        "metadata": {
          "displayName": "Window Size",
          "description": "Window size for the alert"
        },
        "allowedValues": [
          "PT1M",
          "PT5M",
          "PT10M",
          "PT15M",
          "PT30M",
          "PT45M",
          "PT1H",
          "PT2H",
          "PT3H",
          "PT4H",
          "PT5H",
          "PT6H",
          "P1D"
        ],
        "defaultValue": "P1D"
      },
      "evaluationFrequency": {
        "type": "String",
        "metadata": {
          "displayName": "Evaluation Frequency",
          "description": "Evaluation frequency for the alert"
        },
        "allowedValues": [
          "PT5M",
          "PT10M",
          "PT15M",
          "PT30M",
          "PT45M",
          "PT1H",
          "PT2H",
          "PT3H",
          "PT4H",
          "PT5H",
          "PT6H",
          "P1D"
        ],
        "defaultValue": "PT1H"
      },
      "autoMitigate": {
        "type": "String",
        "metadata": {
          "displayName": "Auto Mitigate",
          "description": "Auto Mitigate for the alert"
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "true"
      },
      "enabled": {
        "type": "String",
        "metadata": {
          "displayName": "Alert State",
          "description": "Alert state for the alert"
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "true"
      },
      "threshold": {
        "type": "String",
        "metadata": {
          "displayName": "Threshold",
          "description": "Threshold for the alert"
        },
        "defaultValue": "0"
      },
      "failingPeriods": {
        "type": "String",
        "metadata": {
          "displayName": "Failing Periods",
          "description": "Number of failing periods before alert is fired"
        },
        "defaultValue": "1"
      },
      "evaluationPeriods": {
        "type": "String",
        "metadata": {
          "displayName": "Evaluation Periods",
          "description": "The number of aggregated lookback points."
        },
        "defaultValue": "1"
      },
      "effect": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "Effect of the policy"
        },
        "allowedValues": [
          "deployIfNotExists",
          "disabled"
        ],
        "defaultValue": "deployIfNotExists"
      },
      "MonitorDisableTagName": {
        "type": "String",
        "metadata": {
          "displayName": "ALZ Monitoring disabled tag name",
          "description": "Tag name used to disable monitoring at the resource level. Set to true if monitoring should be disabled."
        },
        "defaultValue": "MonitorDisable"
      },
      "MonitorDisableTagValues": {
        "type": "Array",
        "metadata": {
          "displayName": "ALZ Monitoring disabled tag values(s)",
          "description": "Tag value(s) used to disable monitoring at the resource level. Set to true if monitoring should be disabled."
        },
        "defaultValue": [
          "true",
          "Test",
          "Dev",
          "Sandbox"
        ]
      }
    },
    "policyRule": {
      "if": {
        "allOf": [
          {
            "field": "type",
            "equals": "Microsoft.OperationalInsights/workspaces"
          },
          {
            "field": "[[concat('tags[', parameters('MonitorDisableTagName'), ']')]",
            "notIn": "[[parameters('MonitorDisableTagValues')]"
          }
        ]
      },
      "then": {
        "effect": "[[parameters('effect')]",
        "details": {
          "roleDefinitionIds": [
            "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
          ],
          "type": "Microsoft.Insights/scheduledQueryRules",
          "existenceCondition": {
            "allOf": [
              {
                "field": "Microsoft.Insights/scheduledQueryRules/scopes[*]",
                "equals": "[[concat(subscription().id, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.OperationalInsights/workspaces/', field('fullName'))]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/enabled",
                "equals": "[[parameters('enabled')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/evaluationFrequency",
                "equals": "[[parameters('evaluationFrequency')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/windowSize",
                "equals": "[[parameters('windowSize')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/severity",
                "equals": "[[parameters('severity')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/autoMitigate",
                "equals": "[[parameters('autoMitigate')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/criteria.allOf[*].threshold",
                "equals": "[[parameters('threshold')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/criteria.allOf[*].operator",
                "equals": "[[parameters('operator')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/criteria.allOf[*].timeAggregation",
                "equals": "[[parameters('timeAggregation')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/criteria.allOf[*].failingPeriods.numberOfEvaluationPeriods",
                "equals": "[[parameters('evaluationPeriods')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/criteria.allOf[*].failingPeriods.minFailingPeriodsToAlert",
                "equals": "[[parameters('failingPeriods')]"
              },
              {
                "field": "Microsoft.Insights/scheduledQueryRules/criteria.allOf[*].query",
                "equals": "[[format('let excludedResources = (arg(\"\").resources | where type =~ \"Microsoft.OperationalInsights/workspaces\" | where parse_json(tostring(tags.[\"{0}\"])) in~ (\"{1}\") | project customerId = tostring(properties.customerId)); let workspaceResources = (arg(\"\").resources | where type =~ \"Microsoft.OperationalInsights/workspaces\" | project id, customerId = tostring(properties.customerId), workspaceName = tostring(name)); Operation | where TenantId !in~ (excludedResources) | where OperationCategory == \"Data Collection Status\" | where Detail has_any(\"RespectQuota\", \"OverQuota\") | summarize arg_max(TimeGenerated, *) by TenantId | where Detail has \"OverQuota\" | join hint.remote=left kind=inner workspaceResources on $left.TenantId == $right.customerId | project TimeGenerated, id, workspaceName, workspaceId = TenantId, Detail', parameters('MonitorDisableTagName'), join(parameters('MonitorDisableTagValues'), '\",\"'))]"
              },
              {
                "field": "identity.userAssignedIdentities",
                "containsKey": "[[parameters('UAMIResourceId')]"
              }
            ]
          },
          "deployment": {
            "properties": {
              "mode": "incremental",
              "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "parameters": {
                  "resourceName": {
                    "type": "String",
                    "metadata": {
                      "displayName": "resourceName",
                      "description": "Name of the resource"
                    }
                  },
                  "resourceId": {
                    "type": "String",
                    "metadata": {
                      "displayName": "resourceId",
                      "description": "Resource ID of the resource emitting the metric that will be used for the comparison"
                    }
                  },
                  "resourceLocation": {
                    "type": "String",
                    "metadata": {
                      "displayName": "resourceLocation",
                      "description": "Location of the resource"
                    }
                  },
                  "UAMIResourceId": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "String"
                  },
                  "windowSize": {
                    "type": "String"
                  },
                  "evaluationFrequency": {
                    "type": "String"
                  },
                  "autoMitigate": {
                    "type": "String"
                  },
                  "enabled": {
                    "type": "String"
                  },
                  "threshold": {
                    "type": "String"
                  },
                  "operator": {
                    "type": "String"
                  },
                  "timeAggregation": {
                    "type": "String"
                  },
                  "failingPeriods": {
                    "type": "String"
                  },
                  "evaluationPeriods": {
                    "type": "String"
                  },
                  "MonitorDisableTagName": {
                    "type": "String"
                  },
                  "MonitorDisableTagValues": {
                    "type": "Array"
                  }
                },
                "variables": {},
                "resources": [
                  {
                    "type": "Microsoft.Insights/scheduledQueryRules",
                    "apiVersion": "2022-08-01-preview",
                    "name": "[[concat(parameters('resourceName'), '-DailyCapLimitReachedAlert')]",
                    "location": "[[parameters('resourceLocation')]",
                    "identity": {
                      "type": "UserAssigned",
                      "userAssignedIdentities": {
                        "[[parameters('UAMIResourceId')]": {}
                      }
                    },
                    "tags": {
                      "_deployed_by_amba": true
                    },
                    "properties": {
                      "displayName": "[[concat(parameters('resourceName'), '-DailyCapLimitReachedAlert')]",
                      "description": "Log Alert for Daily Cap Limit Reached",
                      "severity": "[[parameters('severity')]",
                      "enabled": "[[parameters('enabled')]",
                      "scopes": [
                        "[[parameters('resourceId')]"
                      ],
                      "evaluationFrequency": "[[parameters('evaluationFrequency')]",
                      "windowSize": "[[parameters('windowSize')]",
                      "criteria": {
                        "allOf": [
                          {
                            "query": "[[format('let excludedResources = (arg(\"\").resources | where type =~ \"Microsoft.OperationalInsights/workspaces\" | where parse_json(tostring(tags.[\"{0}\"])) in~ (\"{1}\") | project customerId = tostring(properties.customerId)); let workspaceResources = (arg(\"\").resources | where type =~ \"Microsoft.OperationalInsights/workspaces\" | project id, customerId = tostring(properties.customerId), workspaceName = tostring(name)); Operation | where TenantId !in~ (excludedResources) | where OperationCategory == \"Data Collection Status\" | where Detail has_any(\"RespectQuota\", \"OverQuota\") | summarize arg_max(TimeGenerated, *) by TenantId | where Detail has \"OverQuota\" | join hint.remote=left kind=inner workspaceResources on $left.TenantId == $right.customerId | project TimeGenerated, id, workspaceName, workspaceId = TenantId, Detail', parameters('MonitorDisableTagName'), join(parameters('MonitorDisableTagValues'), '\",\"'))]",
                            "threshold": "[[parameters('threshold')]",
                            "operator": "[[parameters('operator')]",
                            "dimensions": [
                              {
                                "name": "workspaceName",
                                "operator": "Include",
                                "values": [
                                  "*"
                                ]
                              }
                            ],
                            "resourceIdColumn": "id",
                            "timeAggregation": "[[parameters('timeAggregation')]",
                            "failingPeriods": {
                              "numberOfEvaluationPeriods": "[[parameters('evaluationPeriods')]",
                              "minFailingPeriodsToAlert": "[[parameters('failingPeriods')]"
                            }
                          }
                        ]
                      },
                      "autoMitigate": "[[parameters('autoMitigate')]",
                      "parameters": {
                        "UAMIResourceId": {
                          "value": "[[parameters('UAMIResourceId')]"
                        },
                        "severity": {
                          "value": "[[parameters('severity')]"
                        },
                        "windowSize": {
                          "value": "[[parameters('windowSize')]"
                        },
                        "evaluationFrequency": {
                          "value": "[[parameters('evaluationFrequency')]"
                        },
                        "autoMitigate": {
                          "value": "[[parameters('autoMitigate')]"
                        },
                        "enabled": {
                          "value": "[[parameters('enabled')]"
                        },
                        "threshold": {
                          "value": "[[parameters('threshold')]"
                        },
                        "operator": {
                          "value": "[[parameters('operator')]"
                        },
                        "timeAggregation": {
                          "value": "[[parameters('timeAggregation')]"
                        },
                        "failingPeriods": {
                          "value": "[[parameters('failingPeriods')]"
                        },
                        "evaluationPeriods": {
                          "value": "[[parameters('evaluationPeriods')]"
                        },
                        "MonitorDisableTagName": {
                          "value": "[[parameters('MonitorDisableTagName')]"
                        },
                        "MonitorDisableTagValues": {
                          "value": "[[parameters('MonitorDisableTagValues')]"
                        }
                      }
                    }
                  }
                ]
              },
              "parameters": {
                "resourceName": {
                  "value": "[[field('name')]"
                },
                "resourceId": {
                  "value": "[[field('id')]"
                },
                "resourceLocation": {
                  "value": "[[field('location')]"
                },
                "UAMIResourceId": {
                  "value": "[[parameters('UAMIResourceId')]"
                },
                "severity": {
                  "value": "[[parameters('severity')]"
                },
                "windowSize": {
                  "value": "[[parameters('windowSize')]"
                },
                "evaluationFrequency": {
                  "value": "[[parameters('evaluationFrequency')]"
                },
                "autoMitigate": {
                  "value": "[[parameters('autoMitigate')]"
                },
                "enabled": {
                  "value": "[[parameters('enabled')]"
                },
                "threshold": {
                  "value": "[[parameters('threshold')]"
                },
                "operator": {
                  "value": "[[parameters('operator')]"
                },
                "timeAggregation": {
                  "value": "[[parameters('timeAggregation')]"
                },
                "failingPeriods": {
                  "value": "[[parameters('failingPeriods')]"
                },
                "evaluationPeriods": {
                  "value": "[[parameters('evaluationPeriods')]"
                },
                "MonitorDisableTagName": {
                  "value": "[[parameters('MonitorDisableTagName')]"
                },
                "MonitorDisableTagValues": {
                  "value": "[[parameters('MonitorDisableTagValues')]"
                }
              }
            }
          }
        }
      }
    }
  }
}
